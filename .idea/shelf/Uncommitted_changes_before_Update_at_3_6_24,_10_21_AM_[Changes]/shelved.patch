Index: healthScore/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom django.utils import timezone\nfrom datetime import datetime, timedelta\n\n# from django.contrib import messages\nfrom django.contrib.auth.hashers import make_password\nimport json\nfrom django.forms.models import model_to_dict\n\nfrom reportlab.lib.pagesizes import letter\nfrom reportlab.platypus import (\n    SimpleDocTemplate,\n    Paragraph,\n    Spacer,\n    Table,\n    TableStyle,\n    Image,\n)\nfrom reportlab.lib.styles import getSampleStyleSheet\nfrom reportlab.lib import colors\nfrom reportlab.lib.enums import TA_RIGHT\nfrom reportlab.lib.styles import ParagraphStyle\n\n# To overcame issues with regards to permissions (POST calls will give CSRF errors if the below tag is not used)\nfrom django.views.decorators.csrf import csrf_exempt\n\nfrom .models import (\n    healthRecord,\n    hospital,\n    user,\n    hospitalStaff,\n    # communityInteraction,\n    appointment,\n)\n\n\ndef homepage(request):\n    return render(request, \"homepage.html\")\n\n\ndef test_default_values(request):\n    # To get all records from the  healthRecord table\n    # healthRecordObjects = healthRecord.objects.all().values()\n    # To create new records and save them\n    # h = hospital.objects.create(name=\"NYU\", address=\"246\", email=\"nyu@nyu.com\", password=\"123435\", contactInfo=\"123456781\")\n\n    return HttpResponse(\"<h1>Finally Workingggggggg. Welcome to HealthScore</h1>\")\n\n\ndef view_health_history(request):\n    if request.method == \"GET\":\n        # Filtering to just userID=5 to simulate it being a users view.\n        history_list = healthRecord.objects.filter(userID=2)\n\n        appointment_name = request.GET.get(\"appointment_name\")\n        if appointment_name:\n            history_list = history_list.filter(\n                appointmentId__name__icontains=appointment_name\n            )\n\n        healthcare_worker = request.GET.get(\"healthcare_worker\")\n        if healthcare_worker:\n            doctor_ids = hospitalStaff.objects.filter(\n                name__icontains=healthcare_worker\n            ).values_list(\"id\", flat=True)\n            history_list = history_list.filter(doctorID__in=doctor_ids)\n\n        filter_date = request.GET.get(\"date\")\n        if filter_date:\n            filter_date = datetime.strptime(filter_date, \"%Y-%m-%d\").date()\n            current_tz = timezone.get_current_timezone()\n            start_of_day = timezone.make_aware(\n                datetime.combine(filter_date, datetime.min.time()), current_tz\n            )\n            end_of_day = start_of_day + timedelta(days=1)\n            history_list = history_list.filter(\n                createdAt__range=(start_of_day, end_of_day)\n            )\n\n        healthcare_facility = request.GET.get(\"healthcare_facility\")\n        if healthcare_facility:\n            hospital_ids = hospital.objects.filter(\n                name__icontains=healthcare_facility\n            ).values_list(\"id\", flat=True)\n            history_list = history_list.filter(hospitalID__in=hospital_ids)\n\n        detailed_history_list = []\n        each_details = []\n        for h in history_list:\n            h_details = model_to_dict(h)\n            each_details.append(h_details)\n            # Fetch related appointment details\n            appointment_details = appointment.objects.get(id=h.appointmentId_id)\n            appointment_name = appointment_details.name\n            appointment_properties = json.loads(h.appointmentId.properties)\n            appointment_type = appointment_properties.get(\"type\", \"Unknown\")\n\n            # Fetch healthcare worker details by Dr. ID\n            doctor_details = hospitalStaff.objects.get(id=h.doctorID)\n            doctor_name = doctor_details.name\n\n            # Fetch hospital details by hospitalID\n            hospital_details = hospital.objects.get(id=h.hospitalID)\n            hospital_name = hospital_details.name\n            hospital_address = hospital_details.address\n\n            # Append a dictionary for each record with all the details needed\n            detailed_history_list.append(\n                {\n                    \"doctor_name\": doctor_name,\n                    \"hospital_name\": hospital_name,\n                    \"hospital_address\": hospital_address,\n                    \"createdAt\": datetime.date(h.createdAt),\n                    \"updatedAt\": datetime.date(h.updatedAt),\n                    \"appointment_name\": appointment_name,\n                    \"appointment_type\": appointment_type,\n                    \"appointment_properties\": json.dumps(appointment_properties),\n                }\n            )\n\n        zipped_details = zip(detailed_history_list, each_details)\n    return render(request, \"view_history.html\", {\"zipped_details\": zipped_details})\n\n\ndef view_report(request):\n\n    response = HttpResponse(content_type=\"application/pdf\")\n    response[\"Content-Disposition\"] = 'attachment; filename=\"Report.pdf\"'\n\n    doc = SimpleDocTemplate(response, pagesize=letter)\n    styles = getSampleStyleSheet()\n    story = []\n\n    title_style = styles[\"Title\"]\n    title = \"Health Records Report\"\n    story.append(Paragraph(title, title_style))\n    story.append(Spacer(1, 18))\n\n    right_aligned_style = ParagraphStyle(\n        \"RightAligned\", parent=styles[\"Normal\"], alignment=TA_RIGHT\n    )\n    current_date = datetime.now().strftime(\"%Y-%m-%d\")\n\n    logo = \"healthScore/static/HSlogo.jpg\"\n    logo_img = Image(logo, width=128, height=40)\n    logo_and_date = [\n        [logo_img, Paragraph(\"Date: \" + current_date, right_aligned_style)]\n    ]\n    logo_and_date = Table(logo_and_date)\n    logo_and_date.setStyle(\n        TableStyle(\n            [\n                (\"VALIGN\", (0, 0), (-1, -1), \"MIDDLE\"),\n                (\"ALIGN\", (1, 0), (1, 0), \"RIGHT\"),\n                (\"BOTTOMPADDING\", (0, 0), (-1, -1), 12),\n            ]\n        )\n    )\n    story.append(logo_and_date)\n\n    user_id = 5\n    user_info = user.objects.get(id=user_id)\n    story.append(Paragraph(\"Name: \" + user_info.name, styles[\"Normal\"]))\n    story.append(\n        Paragraph(\"DOB: \" + user_info.dob.strftime(\"%Y-%m-%d\"), styles[\"Normal\"])\n    )\n    story.append(Paragraph(\"BloodGroup: \" + user_info.bloodGroup, styles[\"Normal\"]))\n    story.append(Paragraph(\"Email: \" + user_info.email, styles[\"Normal\"]))\n    story.append(Paragraph(\"Contact: \" + user_info.contactInfo, styles[\"Normal\"]))\n    story.append(Paragraph(\"Address: \" + user_info.address, styles[\"Normal\"]))\n    story.append(Spacer(1, 12))\n\n    table_data = [\n        [\n            Paragraph(\"Reason for Visit\"),\n            Paragraph(\"Visit Details\"),\n            Paragraph(\"Healthcare Worker\"),\n            Paragraph(\"Healthcare Facility\"),\n            Paragraph(\"Address\"),\n            Paragraph(\"Date\"),\n            Paragraph(\"Properties\"),\n        ],\n    ]\n\n    selected_record_ids = request.POST.getlist(\"record_ids\")\n    for record_id in selected_record_ids:\n        row = []\n        record = healthRecord.objects.get(id=record_id)\n        appointment_pro = record.appointmentId.properties\n        appointment_properties = json.loads(appointment_pro)\n        appointment_name = record.appointmentId.name\n        appointment_name_para = Paragraph(appointment_name)\n        row.append(appointment_name_para)\n\n        appointment_type = appointment_properties.get(\"type\", \"Unknown\")\n        appointment_type_para = Paragraph(appointment_type)\n        row.append(appointment_type_para)\n\n        doctor_name = hospitalStaff.objects.get(id=record.doctorID).name\n        doctor_name_para = Paragraph(doctor_name)\n        row.append(doctor_name_para)\n\n        hospital_name = hospital.objects.get(id=record.hospitalID).name\n        hospital_name_para = Paragraph(hospital_name)\n        row.append(hospital_name_para)\n\n        hospital_addr = hospital.objects.get(id=record.hospitalID).address\n        hospital_addr_para = Paragraph(hospital_addr)\n        row.append(hospital_addr_para)\n\n        updated = record.updatedAt.strftime(\"%Y-%m-%d %H:%M\")\n        updated_para = Paragraph(updated)\n        row.append(updated_para)\n        table_data.append(row)\n\n    page_width, page_height = letter\n    left_margin = right_margin = 50\n    effective_page_width = page_width - (left_margin + right_margin)\n\n    col_widths = [\n        effective_page_width * 0.1,  # Reason for Visit\n        effective_page_width * 0.2,  # Visit Details\n        effective_page_width * 0.15,  # Healthcare Worker\n        effective_page_width * 0.15,  # Healthcare Facility\n        effective_page_width * 0.15,  # Address\n        effective_page_width * 0.15,  # Date\n        effective_page_width * 0.2,  # Properties\n    ]\n    table = Table(table_data, colWidths=col_widths)\n\n    table_style = TableStyle(\n        [\n            (\"BACKGROUND\", (0, 0), (-1, 0), colors.grey),\n            (\"TEXTCOLOR\", (0, 0), (-1, 0), colors.whitesmoke),\n            (\"ALIGN\", (0, 0), (-1, -1), \"CENTER\"),\n            (\"FONTNAME\", (0, 0), (-1, 0), \"Helvetica-Bold\"),\n            (\"BOTTOMPADDING\", (0, 0), (-1, 0), 12),\n            (\"BACKGROUND\", (0, 1), (-1, -1), colors.white),\n            (\"GRID\", (0, 0), (-1, -1), 1, colors.black),\n            (\"TEXTCOLOR\", (0, 0), (-1, -1), colors.black),\n            (\"VALIGN\", (0, 0), (-1, -1), \"TOP\"),\n            (\"WORDWRAP\", (0, 0), (-1, -1), \"CJK\"),\n        ]\n    )\n\n    table.setStyle(table_style)\n    story.append(table)\n\n    doc.build(story)\n    return response\n\n\n@csrf_exempt\ndef registration(request):\n    context = {\n        \"email\": \"\",\n        \"username\": \"\",\n        \"fullname\": \"\",\n        \"dob\": \"\",\n        \"gender\": \"\",\n        \"street_address\": \"\",\n        \"city\": \"\",\n        \"state\": \"\",\n        \"phone_number\": \"\",\n        \"error_message\": \"\",\n    }\n\n    if request.method == \"POST\":  # when the form is submitted\n        context[\"email\"] = email = request.POST.get(\"email\")\n        context[\"username\"] = username = request.POST.get(\"username\")\n        context[\"fullname\"] = fullname = request.POST.get(\"fullname\")\n        context[\"dob\"] = dob = request.POST.get(\"dob\")\n        context[\"gender\"] = gender = request.POST.get(\"gender\")\n        context[\"street_address\"] = street_address = request.POST.get(\"street_address\")\n        context[\"city\"] = city = request.POST.get(\"city\")\n        context[\"state\"] = state = request.POST.get(\"state\")\n        context[\"phone_number\"] = phone_number = request.POST.get(\"phone_number\")\n        # identity_proof = request.POST.get(\"identity_proof\")\n\n        if user.objects.filter(email=email).exists():\n            context[\"error_message\"] = (\n                \"An account already exists for this email address. Please log in.\"\n            )\n            return render(request, \"registration.html\", context)\n\n        elif user.objects.filter(userName=username).exists():\n            context[\"error_message\"] = (\n                \"Username already exists. Please choose a different one.\"\n            )\n            return render(request, \"registration.html\", context)\n\n        else:\n            hashed_password = make_password(request.POST.get(\"password\"))\n\n            user.objects.create(\n                email=email,\n                userName=username,\n                password=hashed_password,\n                name=fullname,\n                dob=dob,\n                gender=gender,\n                address=f\"{street_address}, {city}, {state}\",\n                contactInfo=phone_number,\n            )\n\n            return redirect(\"homepage\")\n\n    return render(request, \"registration.html\")\n\n\ndef login_view(request):\n    if request.method == \"POST\":\n        username = request.POST[\"username\"]\n        password = request.POST[\"password\"]\n\n        if not user.objects.filter(userName=username).exists():\n            return render(\n                request,\n                \"login.html\",\n                {\"error_message\": \"Username does not exist. Please retype.\"},\n            )\n        else:\n            if user.objects.filter(userName=username, password=password).exists():\n                return redirect(\"index\")\n            else:\n                return render(\n                    request,\n                    \"login.html\",\n                    {\"error_message\": \"Incorrect password. Please try again.\"},\n                )\n    return render(request, \"login.html\")\n\n\n@csrf_exempt\ndef add_mock_data(request):\n    if request.method == \"POST\":\n        # Adding data to the Hospital table\n        # hospital.objects.create(name=\"NYU Langone Health\", address=\"424 E 34th St, New York, NY 10016\", email=\"hospital_a@example.com\", password=\"123456\", contactInfo=\"123456781\", status=\"approved\")\n        # hospital.objects.create(name=\"Mount Sinai Hospital\", address=\"1468 Madison Ave, New York, NY 10029\", email=\"hospital_b@example.com\", password=\"123456\", contactInfo=\"123456781\", status=\"approved\")\n        # hospital.objects.create(name=\"CVS Pharmacy\", address=\"305 East 86th St, New York, NY 10028\", email=\"hospital_c@example.com\", password=\"123456\", contactInfo=\"123456781\", status=\"approved\")\n        # hospital.objects.create(name=\"Duane Reade\", address=\"1 Union Square South, New York, NY 10003\", email=\"hospital_d@example.com\", password=\"123456\", contactInfo=\"123456781\", status=\"approved\")\n\n        # Adding hospitalStaff data\n        # hospitalStaff.objects.create(hospitalID=hospital.objects.get(id=5), admin=False, name=\"Dr. Steve Johnson\", email=\"sj@langone.com\", password=\"pass1234\", specialization=\"Orthopedics\", contactInfo=\"1234567890\")\n        # hospitalStaff.objects.create(hospitalID=hospital.objects.get(id=6), admin=False, name=\"Dr. Coco Gauff\", email=\"cgauff@sinai.com\", password=\"pass1234\", specialization=\"Anesthesiology\", contactInfo=\"1234567890\")\n        # hospitalStaff.objects.create(hospitalID=hospital.objects.get(id=7), admin=False, name=\"Carlos Alcaraz\", email=\"ca@cvs.com\", password=\"pass1234\", specialization=\"\", contactInfo=\"1234567890\")\n        # hospitalStaff.objects.create(hospitalID=hospital.objects.get(id=8), admin=False, name=\"Sofia Kenin\", email=\"betty@duanereade.com\", password=\"pass1234\", specialization=\"\", contactInfo=\"1234567890\")\n        # hospitalStaff.objects.create(hospitalID=hospital.objects.get(id=6), admin=False, name=\"Dr. Jannik Sinner\", email=\"jsinner@sinai.com\", password=\"pass1234\", specialization=\"Psychiatry\", contactInfo=\"1234567890\")\n\n        # Adding user data\n        # user.objects.create(email=\"sgeier19@gmail.com\", name=\"Sam Geier\", password=\"userpass1\", userName=\"sgeier19\", dob=\"1994-05-14\", contactInfo=\"1234567890\", proofOfIdentity=\"Proof1\", address=\"70 Washington Square S, New York, NY 10012\", securityQues=\"\", securityAns=\"\",bloodGroup=\"A+\")\n\n        # Adding appointment Data\n        # appointment.objects.create(name=\"Vaccine\", properties = json.dumps({\"type\":\"Fluzone Sanofi\", \"dose_2\": False, \"date\":datetime.datetime.now()}, default=str))\n        # appointment.objects.create(name=\"Vaccine\", properties = json.dumps({\"type\":\"Comirnaty Pfizer\", \"dose_2\": True, \"date\":datetime.datetime.now()}, default=str))\n        # appointment.objects.create(name=\"Blood test\", properties = json.dumps({\"type\":\"Iron check\", \"dose_2\": False, \"date\":datetime.datetime.now()}, default=str))\n        # appointment.objects.create(name=\"MRI\", properties = json.dumps({\"type\":\"Bad back\", \"dose_2\": False, \"date\":datetime.datetime.now()}, default=str))\n\n        # healthRecord data\n        # healthRecord.objects.create(doctorID=11, userID=user.objects.get(id=5), hospitalID=7, status=\"approved\", createdAt=datetime.datetime.now(), updatedAt=datetime.datetime.now(), appointmentId=appointment.objects.get(id=5), healthDocuments=\"\")\n        # healthRecord.objects.create(doctorID=12, userID=user.objects.get(id=5), hospitalID=8, status=\"approved\", createdAt=datetime.datetime.now(), updatedAt=datetime.datetime.now(), appointmentId=appointment.objects.get(id=6), healthDocuments=\"\")\n        # healthRecord.objects.create(doctorID=9, userID=user.objects.get(id=5), hospitalID=5, status=\"approved\", createdAt=datetime.datetime.now(), updatedAt=datetime.datetime.now(), appointmentId=appointment.objects.get(id=7), healthDocuments=\"\")\n        # healthRecord.objects.create(doctorID=10, userID=user.objects.get(id=5), hospitalID=6, status=\"approved\", createdAt=datetime.datetime.now(), updatedAt=datetime.datetime.now(), appointmentId=appointment.objects.get(id=8), healthDocuments=\"\")\n        return HttpResponse(\"Data Added to the database\")\n    else:\n        return HttpResponse(\"Please change the request method to POST\")\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/healthScore/views.py b/healthScore/views.py
--- a/healthScore/views.py	
+++ b/healthScore/views.py	
@@ -51,7 +51,7 @@
 def view_health_history(request):
     if request.method == "GET":
         # Filtering to just userID=5 to simulate it being a users view.
-        history_list = healthRecord.objects.filter(userID=2)
+        history_list = healthRecord.objects.filter(userID=5)
 
         appointment_name = request.GET.get("appointment_name")
         if appointment_name:
@@ -93,7 +93,8 @@
             # Fetch related appointment details
             appointment_details = appointment.objects.get(id=h.appointmentId_id)
             appointment_name = appointment_details.name
-            appointment_properties = json.loads(h.appointmentId.properties)
+            # appointment_properties = json.loads(h.appointmentId.properties)
+            appointment_properties = h.appointmentId.properties
             appointment_type = appointment_properties.get("type", "Unknown")
 
             # Fetch healthcare worker details by Dr. ID
@@ -188,7 +189,8 @@
         row = []
         record = healthRecord.objects.get(id=record_id)
         appointment_pro = record.appointmentId.properties
-        appointment_properties = json.loads(appointment_pro)
+        # appointment_properties = json.loads(appointment_pro)
+        appointment_properties = appointment_pro
         appointment_name = record.appointmentId.name
         appointment_name_para = Paragraph(appointment_name)
         row.append(appointment_name_para)
@@ -331,6 +333,9 @@
                 )
     return render(request, "login.html")
 
+def view_requests(request):
+    return render(request,"view_request.html")
+
 
 @csrf_exempt
 def add_mock_data(request):
